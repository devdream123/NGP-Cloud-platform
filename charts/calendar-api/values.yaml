projectId: ""

replicaCount: 3

calendar-api:
  fullname: calendar-api
  
  labels:
    run: calendar-api

  selectorLabels:
    run: calendar-api

image:
  repository: ""
  pullPolicy: Always
  tag: ""

initContainer:
  name: "workload-identity-initcontainer"
  image: "gcr.io/google.com/cloudsdktool/cloud-sdk:326.0.0-alpine"
  command:
  - '/bin/bash'
  - '-c'
  - |
    curl -sS -H 'Metadata-Flavor: Google' 'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token' --retry 30 --retry-connrefused --retry-max-time 60 --connect-timeout 3 --fail --retry-all-errors > /dev/null && exit 0 || echo 'Retry limit exceeded. Failed to wait for metadata server to be available. Check if the gke-metadata-server Pod in the kube-system namespace is healthy.' >&2; exit 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 80

readinessProbe: 
  path: /health
  port: http
  initialDelaySeconds: 15
  periodSeconds: 120

livelinessProbe:
  path: /health 
  port: http
  failureThreshold: 1
  initialDelaySeconds: 15
  periodSeconds: 120

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

hierarchy:
  url: http://hierarchy-api
  key: "f44910b7-4b35-48bb-ac16-4f6a4d5af120"

demandDriver:
  forecastUrl: http://forecast-api.ngp.svc.cluster.local

graphQLClient:
  dealsheetUrl: http://dealsheet-api/graphql
  eventScheduleUrl: http://eventschedule-api/graphql

firestoreSettings:
  rootCollectionName: "calendar-assortments"

systemTimeZone: "Australia/Sydney"

serviceSettings:
  calendar:
    firestoreSettings:
      rootCollectionName: "calendar-assortments"
  dealsheet:
    firestoreSettings:
      rootCollectionName: "dealsheet-assortments"
  scenario:
    firestoreSettings:
      rootCollectionName: "scenarios"
