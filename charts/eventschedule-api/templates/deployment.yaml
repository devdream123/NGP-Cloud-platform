apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "eventschedule-api.fullname" . }}
  labels:
    {{- include "eventschedule-api.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "eventschedule-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- include "eventschedule-api.configChecksum" . | nindent 8 }}
      labels:
        {{- include "eventschedule-api.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "eventschedule-api.fullname" . }}-cm
            {{- if ne .Values.database.auth "iam" }}
            - secretRef:
                name: {{ include "eventschedule-api.fullname" . }}-secrets
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.livelinessProbe.path }}
              port: {{ .Values.livelinessProbe.port }}
            initialDelaySeconds: {{ .Values.livelinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livelinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livelinessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.readinessProbe.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if eq .Values.database.mode "postgres" }}
        - name: cloud-sql-proxy
          image: "gcr.io/cloudsql-docker/gce-proxy:{{ .Values.database.proxyVersion }}"
          {{- if eq .Values.database.auth "iam" }}
          command:
            - "/cloud_sql_proxy"
            - "-enable_iam_login"
            - "-instances={{ .Values.projectId }}:{{ .Values.database.region }}:{{ .Values.database.instance }}=tcp:{{ .Values.database.port }}"
            - "-ip_address_types=PRIVATE"
            - "--token=$(gcloud auth print-access-token --impersonate-service-account='{{ .Values.database.user }}.gserviceaccount.com')"
          {{- else }}
          command:
            - "/cloud_sql_proxy"
            - "-instances={{ .Values.projectId }}:{{ .Values.database.region }}:{{ .Values.database.instance }}=tcp:{{ .Values.database.port }}"
            - "-ip_address_types=PRIVATE"
          {{- end }}
          securityContext:
            runAsNonRoot: true
          resources:
            {{- toYaml .Values.database.proxyResources | nindent 12 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
