projectId: ""

replicaCount: 3

dealsheet-api:
  fullname: dealsheet-api
  
  labels:
    run: dealsheet-api

  selectorLabels:
    run: dealsheet-api

image:
  repository: ""
  pullPolicy: Always
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 80
  
readinessProbe:
  path: /readyz
  port: http
  periodSeconds: 15
  initialDelaySeconds: 120

livelinessProbe:
  path: /graphql?query=%7B__typename%7D
  port: http
  failureThreshold: 2
  initialDelaySeconds: 15
  periodSeconds: 180

resources:
  requests:
    memory: 100Mi
    cpu: 100m
  limits:
    memory: 4Gi
    cpu: 2000m

nodeSelector: {}

tolerations: []

affinity: {}

hierarchy:
  url: http://hierarchy-api.ngp-backend.svc.cluster.local

demandDriver:
  forecastUrl: http://forecast-api.ngp-analytics.svc.cluster.local

graphQLClient:
  calendarUrl: http://calendar-api.ngp-backend.svc.cluster.local/graphql

firestoreSettings:
  rootCollectionName: "dealsheet-assortments"

systemTimeZone: "Australia/Sydney"

serviceSettings:
  calendar:
    firestoreSettings:
      rootCollectionName: "calendar-assortments"
  dealsheet:
    firestoreSettings:
      rootCollectionName: "dealsheet-assortments"
  scenario:
    firestoreSettings:
      rootCollectionName: "scenarios"

PodDisruptionBudget:
  minAvailable: 66% #K8s rounds up to the nearest integer if the Replica Count is odd